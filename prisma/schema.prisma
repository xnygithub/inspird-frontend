generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                      String                    @id @db.Uuid
  username                String                    @unique @db.VarChar(25)
  createdAt               DateTime                  @default(now())
  email                   String                    @unique @db.VarChar(50)
  displayName             String                    @db.VarChar(50)
  avatarUrl               String                    @default("") @db.VarChar(255)
  profilePrivate          Boolean                   @default(false)
  hasOnboarded            Boolean                   @default(false)
  stripeCustomerId        String?                   @db.VarChar(255)
  subscriptionId          String?                   @db.VarChar(255)
  subscriptionStatus      String?                   @db.VarChar(255)
  CanvasDoc               CanvasDoc[]
  Folder                  Folder[]
  posts                   Post[]
  savedItems              SavedItems[]
  userSubscriptionHistory userSubscriptionHistory[]

  @@index([username])
  @@map("profiles")
}

model CanvasDoc {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  title     String   @db.VarChar(255)
  data      Json     @default("{}") @db.Json
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("canvas_doc")
}

model Post {
  createdAt        DateTime               @default(now())
  userId           String                 @db.Uuid
  isAiGenerated    Boolean                @default(false)
  isNsfw           Boolean                @default(false)
  isPrivate        Boolean                @default(false)
  mediaAltText     String                 @db.VarChar(255)
  mediaAspectRatio Float
  mediaHeight      Int
  mediaSize        Int
  mediaType        MediaType              @default(image)
  mediaUrl         String                 @db.VarChar(255)
  mediaWidth       Int
  processingStatus ProcessingStatus       @default(not_started)
  id               String                 @id @default(uuid()) @db.Uuid
  embedding        Unsupported("vector")?
  FolderPost       FolderPost[]
  users            Profile                @relation(fields: [userId], references: [id])
  savedItems       SavedItems[]

  @@index([userId])
  @@map("posts")
}

model SavedItems {
  createdAt  DateTime     @default(now())
  postId     String       @db.Uuid
  userId     String       @db.Uuid
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  FolderPost FolderPost[]
  posts      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  users      Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "uq_user_saved_items")
  @@unique([userId, id], map: "uq_savedpost_id_user")
  @@index([postId])
  @@index([userId])
  @@map("saved_items")
}

model Folder {
  userId      String       @db.Uuid
  name        String       @db.VarChar(50)
  thumbnail   String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  isPrivate   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  FolderPost  FolderPost[]
  users       Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name], map: "uq_user_folder")
  @@unique([id, userId], map: "uq_folder_id_user")
  @@index([userId])
  @@map("folders")
}

model FolderPost {
  userId       String     @db.Uuid
  folderId     String     @db.Uuid
  createdAt    DateTime   @default(now())
  savedItemsId String     @db.Uuid
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId       String?    @db.Uuid
  folders      Folder     @relation(fields: [folderId, userId], references: [id, userId], onDelete: Cascade)
  Post         Post?      @relation(fields: [postId], references: [id])
  saved        SavedItems @relation(fields: [userId, savedItemsId], references: [userId, id], onDelete: Cascade)

  @@unique([folderId, savedItemsId], map: "uq_folder_saved")
  @@index([folderId])
  @@index([userId])
  @@index([savedItemsId])
  @@map("folder_posts")
}

model userSubscriptionHistory {
  id             Int      @id @default(autoincrement())
  userId         String   @db.Uuid
  subscriptionId String   @db.VarChar(255)
  stripePriceId  String   @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  users          Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MediaType {
  image
  video
  gif
}

enum ProcessingStatus {
  not_started
  in_progress
  completed
  failed
}
