generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id                        Int                         @id @default(autoincrement())
  username                  String                      @unique @db.VarChar(20)
  createdAt                 DateTime                    @default(now())
  auth_sub                  String                      @unique @db.VarChar(50)
  email                     String                      @unique @db.VarChar(50)
  display_name              String                      @db.VarChar(50)
  avatar_url                String                      @default("https://avatars.githubusercontent.com/u/123456789?v=4") @db.VarChar(255)
  private                   Boolean                     @default(false)
  has_onboarded             Boolean                     @default(false)
  stripe_customer_id        String?                     @db.VarChar(255)
  subscription_id           String?                     @db.VarChar(255)
  subscription_status       String?                     @db.VarChar(255)
  Folder                    Folder[]
  posts                     Post[]
  saved_items               SavedPost[]
  user_subscription_history user_subscription_history[]

  @@index([username])
  @@index([auth_sub])
  @@map("users")
}

model Post {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  user_id            Int
  is_ai_generated    Boolean          @default(false)
  is_nsfw            Boolean          @default(false)
  is_private         Boolean          @default(false)
  media_alt_text     String           @db.VarChar(255)
  media_aspect_ratio Float
  media_height       Int
  media_size         Int
  media_type         MediaType        @default(image)
  media_url          String           @db.VarChar(255)
  media_width        Int
  processing_status  ProcessingStatus @default(not_started)
  FolderPost         FolderPost[]
  users              Users            @relation(fields: [user_id], references: [id])
  saved_items        SavedPost[]

  @@index([user_id])
  @@map("posts")
}

model SavedPost {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  postId     Int
  userId     Int
  FolderPost FolderPost[]
  posts      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  users      Users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "uq_user_saved_post")
  @@unique([id, userId], map: "uq_savedpost_id_user")
  @@index([postId])
  @@index([userId])
  @@map("saved_items")
}

model Folder {
  id            Int             @id @default(autoincrement())
  userId        Int
  name          String          @db.VarChar(50)
  thumbnail     String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  is_private    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  FolderPost    FolderPost[]
  FolderSection FolderSection[]
  users         Users           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name], map: "uq_user_folder")
  @@unique([id, userId], map: "uq_folder_id_user")
  @@index([userId])
  @@map("folders")
}

model FolderSection {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(50)
  createdAt  DateTime     @default(now())
  folderId   Int
  FolderPost FolderPost[]
  folders    Folder       @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([folderId, name], map: "uq_folder_section")
  @@unique([id, folderId], map: "uq_section_id_folder")
  @@index([name])
  @@index([folderId])
  @@map("folder_sections")
}

model FolderPost {
  id          Int            @id @default(autoincrement())
  userId      Int
  folderId    Int
  sectionId   Int?
  postId      Int?
  savedPostId Int
  createdAt   DateTime       @default(now())
  folders     Folder         @relation(fields: [folderId, userId], references: [id, userId], onDelete: Cascade)
  Post        Post?          @relation(fields: [postId], references: [id])
  saved       SavedPost      @relation(fields: [savedPostId, userId], references: [id, userId], onDelete: Cascade)
  section     FolderSection? @relation(fields: [sectionId, folderId], references: [id, folderId], onDelete: Cascade)

  @@unique([folderId, sectionId, savedPostId], map: "uq_folder_section_saved")
  @@index([folderId])
  @@index([userId])
  @@index([savedPostId])
  @@map("folder_posts")
}

model user_subscription_history {
  id              Int      @id @default(autoincrement())
  userId          Int
  subscriptionId  String   @db.VarChar(255)
  stripe_price_id String   @db.VarChar(255)
  start_date      DateTime
  end_date        DateTime
  users           Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MediaType {
  image
  video
  gif
}

enum ProcessingStatus {
  not_started
  in_progress
  completed
  failed
}
