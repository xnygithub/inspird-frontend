generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// If getting permissions issue using supabase client, check this link
//https://www.reddit.com/r/Supabase/comments/nd5pz3/permissions_issue_using_supabase_client/
model Profile {
  id                      String                    @id @db.Uuid
  username                String                    @unique @db.VarChar(25)
  createdAt               DateTime                  @default(now())
  email                   String                    @unique @db.VarChar(50)
  displayName             String                    @db.VarChar(50)
  avatarUrl               String                    @default("") @db.VarChar(255)
  profilePrivate          Boolean                   @default(false)
  hasOnboarded            Boolean                   @default(false)
  stripeCustomerId        String?                   @db.VarChar(255)
  subscriptionId          String?                   @db.VarChar(255)
  subscriptionStatus      String?                   @db.VarChar(255)
  Folder                  Folder[]
  posts                   Post[]
  savedItems              SavedItems[]
  userSubscriptionHistory userSubscriptionHistory[]

  @@index([username])
  @@map("profiles")
}

model Post {
  id               String           @id @default(uuid()) @db.Uuid
  createdAt        DateTime         @default(now())
  userId           String           @db.Uuid
  isAiGenerated    Boolean          @default(false)
  isNsfw           Boolean          @default(false)
  isPrivate        Boolean          @default(false)
  mediaAltText     String           @db.VarChar(255)
  mediaAspectRatio Float
  mediaHeight      Int
  mediaSize        Int
  mediaType        MediaType        @default(image)
  mediaUrl         String           @db.VarChar(255)
  mediaWidth       Int
  processingStatus ProcessingStatus @default(not_started)
  FolderPost       FolderPost[]
  users            Profile          @relation(fields: [userId], references: [id])
  savedItems       SavedItems[]

  @@index([userId])
  @@map("posts")
}

model SavedItems {
  id         String       @id @default(uuid()) @db.Uuid
  createdAt  DateTime     @default(now())
  postId     String       @db.Uuid
  userId     String       @db.Uuid
  FolderPost FolderPost[]
  posts      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  users      Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "uq_user_saved_items")
  @@unique([userId, id], map: "uq_savedpost_id_user")
  @@index([postId])
  @@index([userId])
  @@map("saved_items")
}

model Folder {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @db.Uuid
  name          String          @db.VarChar(50)
  thumbnail     String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  isPrivate     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  FolderPost    FolderPost[]
  FolderSection FolderSection[]
  users         Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name], map: "uq_user_folder")
  @@unique([id, userId], map: "uq_folder_id_user")
  @@index([userId])
  @@map("folders")
}

model FolderSection {
  id         String       @id @default(uuid()) @db.Uuid
  folderId   String       @db.Uuid
  name       String       @db.VarChar(50)
  createdAt  DateTime     @default(now())
  FolderPost FolderPost[]
  folders    Folder       @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([folderId, name], map: "uq_folder_section")
  @@unique([folderId, id], map: "uq_section_id_folder")
  @@index([name])
  @@index([folderId])
  @@map("folder_sections")
}

model FolderPost {
  id           String         @id @default(uuid()) @db.Uuid
  userId       String         @db.Uuid
  folderId     String         @db.Uuid
  sectionId    String?        @db.Uuid
  postId       String?        @db.Uuid
  savedItemsId String         @db.Uuid
  createdAt    DateTime       @default(now())
  folders      Folder         @relation(fields: [folderId, userId], references: [id, userId], onDelete: Cascade)
  Post         Post?          @relation(fields: [postId], references: [id])
  saved        SavedItems     @relation(fields: [userId, savedItemsId], references: [userId, id], onDelete: Cascade)
  section      FolderSection? @relation(fields: [folderId, sectionId], references: [folderId, id], onDelete: Cascade)

  @@unique([folderId, sectionId, savedItemsId], map: "uq_folder_section_saved")
  @@index([folderId])
  @@index([userId])
  @@index([savedItemsId])
  @@map("folder_posts")
}

model userSubscriptionHistory {
  id             Int      @id @default(autoincrement())
  userId         String   @db.Uuid
  subscriptionId String   @db.VarChar(255)
  stripePriceId  String   @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  users          Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MediaType {
  image
  video
  gif
}

enum ProcessingStatus {
  not_started
  in_progress
  completed
  failed
}
